'''This script goes along the blog post
"Building powerful image classification models using very little data"
from blog.keras.io.
It uses data that can be downloaded at:
https://www.kaggle.com/c/dogs-vs-cats/data
In our setup, we:
- created a data/ folder
- created train/ and validation/ subfolders inside data/
- created cats/ and dogs/ subfolders inside train/ and validation/
- put the cat pictures index 0-999 in data/train/cats
- put the cat pictures index 1000-1400 in data/validation/cats
- put the dogs pictures index 12500-13499 in data/train/dogs
- put the dog pictures index 13500-13900 in data/validation/dogs
So that we have 1000 training examples for each class, and 400 validation examples for each class.
In summary, this is our directory structure:
```
data/
    train/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
    validation/
        dogs/
            dog001.jpg
            dog002.jpg
            ...
        cats/
            cat001.jpg
            cat002.jpg
            ...
```
'''

from keras import applications
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers
from keras.models import Sequential
from keras.layers import Dropout, Flatten, Dense
from keras.models import Model
from keras.layers import Convolution2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D
from keras.layers import Dropout, Flatten, Dense, Input
import pdb
import os
from keras.callbacks import ModelCheckpoint
from keras.callbacks import ReduceLROnPlateau, CSVLogger, EarlyStopping
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'

# path to the model weights files.
weights_path = '../keras/examples/vgg16_weights.h5'
# dimensions of our images.
img_width, img_height = 150, 150

csv_logger = CSVLogger('./vgg19.csv')
top_model_weights_path = '../../data/flower17/finetune-keras/bottleneck_fc_model.h5'
train_data_dir = '../../data/flower17/finetune-keras/train/'
validation_data_dir = '../../data/flower17/finetune-keras/valid/'
FILE_BOTTLENECK_FEATURES_TRAIN = '../../data/flower17/finetune-keras/bottleneck_features_train.npy'
FILE_BOTTLENECK_FEATURES_VALID = '../../data/flower17/finetune-keras/bottleneck_features_valid.npy'
nb_train_samples = 3
nb_validation_samples = 3
epochs = 3
batch_size = 2
NUM_CLASSES = 3

base_model = applications.VGG16(weights='imagenet', include_top=False)

# add a global spatial average pooling layer
x = base_model.output
x = GlobalAveragePooling2D()(x)
# let's add a fully-connected layer
x = Dense(1024, activation='relu')(x)
# and a logistic layer -- let's say we have 200 classes
predictions = Dense(3, activation='softmax')(x)
model = Model(inputs=base_model.input, outputs=predictions)
print model.summary()

#for layer in model.layers[:249]:
#  layer.trainable = False
#for layer in model.layers[249:]:
#   layer.trainable = True


print('Using real-time data augmentation.')
# This will do preprocessing and realtime data augmentation:
if 1:
	model.compile(loss='categorical_crossentropy',
		      optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),
		      metrics=['accuracy'])

	# prepare data augmentation configuration
	train_datagen = ImageDataGenerator(
	    rescale=1. / 255,
	    shear_range=0.2,
	    zoom_range=0.2,
	    horizontal_flip=True)

	test_datagen = ImageDataGenerator(rescale=1. / 255)

	train_generator = train_datagen.flow_from_directory(
	    train_data_dir,
	    target_size=(img_height, img_width),
	    batch_size=batch_size,
	    class_mode='categorical')

	validation_generator = test_datagen.flow_from_directory(
	    validation_data_dir,
	    target_size=(img_height, img_width),
	    batch_size=batch_size,
	    class_mode='categorical')

	# fine-tune the model
	model.fit_generator(
	    train_generator,
	    samples_per_epoch=nb_train_samples,
	    epochs=epochs,
	    validation_data=validation_generator,
	    nb_val_samples=nb_validation_samples)
if 0:
	datagen_train = ImageDataGenerator(
	    rescale=1.0/255,
	    #samplewise_center=True,  # set each sample mean to 0
	    #samplewise_std_normalization=True,  # divide each input by its std
	    horizontal_flip=True,  # randomly flip images
	    vertical_flip=True)  # randomly flip images

	datagen_val = ImageDataGenerator(
	    rescale=1.0/255,
	    #samplewise_center=True,  # set each sample mean to 0
	    #samplewise_std_normalization=True
	    )  # divide each input by its std

	train_generator = datagen_train.flow_from_directory(
	    train_data_dir,
	    target_size=(224,224),
	    batch_size=batch_size,
	    class_mode='categorical')
	val_generator = datagen_val.flow_from_directory(
	    validation_data_dir,
	    target_size=(224,224),
	    batch_size=batch_size,
	    class_mode='categorical')

	# Fit the model on the batches generated by datagen.flow_from_directory().
	print(model.summary())
	model.fit_generator(
	    train_generator,
	    steps_per_epoch=nb_train_samples // batch_size,
	    epochs=epochs,
	    verbose=1,
	    validation_data=val_generator)
	    #validation_steps=nb_validation_samples// batch_size,callbacks=[csv_logger,checkpointer])

if 0:
	# build the VGG16 network
	vgg16_model = applications.VGG16(weights='imagenet', include_top=False, input_shape=(img_width, img_height, 3))
	print('Model loaded.')
	print vgg16_model.output_shape[1:]
	# build a classifier model to put on top of the convolutional model
	last  = vgg16_model.output
	input = Input(batch_shape=vgg16_model.output_shape)
	x = Flatten()(last) # GlobalAveragePooling2D()(input)
	x = Dense(256, activation='relu')(x)
	x = Dropout(0.5)(x)
	predict = Dense(1, activation='sigmoid')(x)
	top_model = Model(vgg16_model.input, predict)

	#top_model = Sequential()
	#top_model.add(Flatten(input_shape=model.output_shape[1:]))
	#top_model.add(Dense(256, activation='relu'))
	#top_model.add(Dropout(0.5))
	#top_model.add(Dense(1, activation='sigmoid'))

	# note that it is necessary to start with a fully-trained
	# classifier, including the top classifier,
	# in order to successfully do fine-tuning
	top_model.load_weights(top_model_weights_path)

	# add the model on top of the convolutional base
	vgg16_model.add(top_model)

	# set the first 25 layers (up to the last conv block)
	# to non-trainable (weights will not be updated)
	for layer in model.layers[:25]:
	    layer.trainable = False

	# compile the model with a SGD/momentum optimizer
	# and a very slow learning rate.
	model.compile(loss='binary_crossentropy',
		      optimizer=optimizers.SGD(lr=1e-4, momentum=0.9),
		      metrics=['accuracy'])

	# prepare data augmentation configuration
	train_datagen = ImageDataGenerator(
	    rescale=1. / 255,
	    shear_range=0.2,
	    zoom_range=0.2,
	    horizontal_flip=True)

	test_datagen = ImageDataGenerator(rescale=1. / 255)

	train_generator = train_datagen.flow_from_directory(
	    train_data_dir,
	    target_size=(img_height, img_width),
	    batch_size=batch_size,
	    class_mode='binary')

	validation_generator = test_datagen.flow_from_directory(
	    validation_data_dir,
	    target_size=(img_height, img_width),
	    batch_size=batch_size,
	    class_mode='binary')

	# fine-tune the model
	model.fit_generator(
	    train_generator,
	    samples_per_epoch=nb_train_samples,
	    epochs=epochs,
	    validation_data=validation_generator,
	    nb_val_samples=nb_validation_samples)

